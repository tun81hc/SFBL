/**
  @page IAP_Binary_Template AN4657 Binary Template Readme file
  
  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    STM32F1xx_IAP/IAP_Binary_Template/readme.txt 
  * @author  MCD Application Team
  * @version 1.0.0
  * @date    8-April-2015
  * @brief   Description of the IAP_Binary_Template directory.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License
  *   
  ******************************************************************************
  @endverbatim

@par Example Description

This directory contains a set of sources files that build the application to be
loaded into Flash memory using In-Application Programming (IAP, through USART).

To build such application, some special configuration has to be performed:
1. Set the program load address at 0x08004000, using your toolchain linker file
2. Relocate the vector table at address 0x08004000, using the "NVIC_SetVectorTable"
   function.

The SysTick example provided within the STM32F1xx HAL Cube examples is used as illustration.
This example configures the SysTick to generate a time base equal to 1 ms.
The system clock is set to the maximum system frequency, the SysTick is clocked by 
the AHB clock (HCLK). A "Delay" function is implemented based on the SysTick 
end-of-count event.
Four LEDs are toggled with a timing defined by the Delay function.


@par Directory contents 

 - "STM32F1xx_IAP/IAP_Binary_Template/EWARM": This folder contains a pre-configured project 
                                          file that produces a binary image of SysTick 
                                          example to be loaded with IAP.
                                          
 - "STM32F1xx_IAP/IAP_Binary_Template/MDK-ARM": This folder contains a pre-configured project 
                                          file that produces a binary image of SysTick 
                                          example to be loaded with Keil.

 - "STM32F1xx_IAP/IAP_Binary_Template/Inc": contains the binary_template firmware header files 
     - STM32F1xx_IAP/IAP_Binary_Template/Inc/stm32f1xx_hal_conf.h  Library Configuration file
     - STM32F1xx_IAP/IAP_Binary_Template/Inc/stm32f1xx_it.h      Header for stm32l0xx_it.c
     - STM32F1xx_IAP/IAP_Binary_Template/Inc/main.h              Header for main.c

 - "STM32F1xx_IAP/IAP_Binary_Template/Src": contains the binary_template firmware source files 
     - STM32F1xx_IAP/IAP_Binary_Template/Src/main.c              Main program
     - STM32F1xx_IAP/IAP_Binary_Template/Src/stm32f1xx_it.c      Interrupt handlers
     - STM32F1xx_IAP/IAP_Binary_Template/Src/system_stm32f1xx.c  STM32L0xx system source file

@note The "system_stm32f1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
     
@par Hardware and Software environment

  - This example runs on STM32F1xx Devices.
  
  - This example has been tested with STMicroelectronics STM3210C-EVAL RevC evaluation board
    and can be easily tailored to any other supported device and development board.

@par How to use it ?  

In order to load the SysTick example with the IAP, you must do the following:

 - EWARM:
    - Open the Project.eww workspace
    - Rebuild all files: Project->Rebuild all
    - A binary file "STM3210C_EVAL_SysTick.bin" will be generated under "STM3210C_EVAL/Exe" folder.  
    - Finally load this image with IAP application

 - MDK-ARM:
    - Open the Project.uvproj project
    - Rebuild all files: Project->Rebuild all target files
    - Go to "/IAP_Binary_Template/MDK-ARM" directory and run "axftobin.bat"
      (Fromelf Exe path might have to be updated in "axftobin.bat" file, according to your Keil setup).
    - A binary file "STM3210C_EVAL_SysTick.bin" will be generated under "STM3210C_EVAL" folder. 
    - Finally load this image with IAP application

 * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
 */
